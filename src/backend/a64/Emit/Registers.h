#pragma once
namespace Dynarmic::BackendA64 {

    enum Reg {
        // 32bit registers
                W0 = 0,
        W1,
        W2,
        W3,
        W4,
        W5,
        W6,
        W7,
        W8,
        W9,
        W10,
        W11,
        W12,
        W13,
        W14,
        W15,
        W16,
        W17,
        W18,
        W19,
        W20,
        W21,
        W22,
        W23,
        W24,
        W25,
        W26,
        W27,
        W28,
        W29,
        W30,

        WSP, // 32bit stack pointer

        // 64bit registers
                X0 = 0x20,
        X1,
        X2,
        X3,
        X4,
        X5,
        X6,
        X7,
        X8,
        X9,
        X10,
        X11,
        X12,
        X13,
        X14,
        X15,
        X16,
        X17,
        X18,
        X19,
        X20,
        X21,
        X22,
        X23,
        X24,
        X25,
        X26,
        X27,
        X28,
        X29,
        X30,

        SP, // 64bit stack pointer

        // VFP single precision registers
                S0 = 0x40,
        S1,
        S2,
        S3,
        S4,
        S5,
        S6,
        S7,
        S8,
        S9,
        S10,
        S11,
        S12,
        S13,
        S14,
        S15,
        S16,
        S17,
        S18,
        S19,
        S20,
        S21,
        S22,
        S23,
        S24,
        S25,
        S26,
        S27,
        S28,
        S29,
        S30,
        S31,

        // VFP Double Precision registers
                D0 = 0x80,
        D1,
        D2,
        D3,
        D4,
        D5,
        D6,
        D7,
        D8,
        D9,
        D10,
        D11,
        D12,
        D13,
        D14,
        D15,
        D16,
        D17,
        D18,
        D19,
        D20,
        D21,
        D22,
        D23,
        D24,
        D25,
        D26,
        D27,
        D28,
        D29,
        D30,
        D31,

        // ASIMD Quad-Word registers
                Q0 = 0xC0,
        Q1,
        Q2,
        Q3,
        Q4,
        Q5,
        Q6,
        Q7,
        Q8,
        Q9,
        Q10,
        Q11,
        Q12,
        Q13,
        Q14,
        Q15,
        Q16,
        Q17,
        Q18,
        Q19,
        Q20,
        Q21,
        Q22,
        Q23,
        Q24,
        Q25,
        Q26,
        Q27,
        Q28,
        Q29,
        Q30,
        Q31,

        // For PRFM(prefetch memory) encoding
        // This is encoded in the Rt register
        // Data preload
                PLDL1KEEP = 0,
        PLDL1STRM,
        PLDL2KEEP,
        PLDL2STRM,
        PLDL3KEEP,
        PLDL3STRM,
        // Instruction preload
                PLIL1KEEP = 8,
        PLIL1STRM,
        PLIL2KEEP,
        PLIL2STRM,
        PLIL3KEEP,
        PLIL3STRM,
        // Prepare for store
                PLTL1KEEP = 16,
        PLTL1STRM,
        PLTL2KEEP,
        PLTL2STRM,
        PLTL3KEEP,
        PLTL3STRM,

        WZR = WSP,
        ZR = SP,

        INVALID_REG = 0xFFFFFFFF
    };
}